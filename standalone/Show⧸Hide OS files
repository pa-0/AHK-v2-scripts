; /* AHK v2 Show/Hide OS files - CONTENTS */
; Settings
; Auto-execute
;  = Show/Hide OS files
;  = End auto-execute
; User-defined Functions
;  = Notification Function
;  = Toggle protected operating system (OS) files Function
;  = Windows Refresh Or Run

;------------------------------------------------------------------------------
; Settings

#Requires AutoHotkey v2.0
#SingleInstance force
#WinActivateForce
KeyHistory 500
Persistent                                    ; added for standalone AHK to prevent auto exit 

;------------------------------------------------------------------------------
; Auto-execute

MyNotificationFunc("Loading - Show/Hide OS files", "10000", "1650", "985", "1") ; 10s

;  = Show/Hide OS files

A_TrayMenu.Delete                             ; delete standard menu
A_TrayMenu.Add "&Toggle OS files", ToggleOS   ; User-defined Function
A_TrayMenu.Add                                ; add a separator
A_TrayMenu.AddStandard                        ; restore standard menu
ToggleOSCheck                                 ; check value of ShowSuperHidden_Status

;  = End auto-execute

SetTimer EndMyNotif, -1000 ; reset timer to 1s
Return

;------------------------------------------------------------------------------
; User-defined Functions

;  = Notification Function

MyNotificationFunc(mytext, myduration, xAxis, yAxis, timer) {
Global MyNotification := Gui()
MyNotification.Opt("+AlwaysOnTop -Caption +ToolWindow")  ; +ToolWindow avoids a taskbar button and an alt-tab menu item.
MyNotification.BackColor := "EEEEEE"  ; White background, can be any RGB color (it will be made transparent below)
MyNotification.SetFont("s9 w1000", "Arial")  ; font size 9, bold
MyNotification.Add("Text", "cBlack w181 Left", mytext)  ; black text
MyNotification.Show("x1650 y985 NoActivate")  ; NoActivate avoids deactivating the currently active window
WinMove xAxis, yAxis,,, MyNotification
if timer = 1
    SetTimer EndMyNotif, myduration * -1
if timer = 0 {
    Sleep myduration
    EndMyNotif
    }
}

EndMyNotif() {
MyNotification.Destroy
}

;  = Toggle protected operating system (OS) files Function
; inspiration from https://www.autohotkey.com/board/topic/82603-toggle-hidden-files-system-files-and-file-extensions/?p=670182

ToggleOS(*) {
ToggleOSCheck
If (ShowSuperHidden_Status = 0) { ; enable if disabled
    RegWrite "1", "REG_DWORD", "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "ShowSuperHidden"
    CheckRegWrite(ShowSuperHidden_Status)
    ToggleOSCheck
    WindowsRefreshOrRun
    }
Else { ; disable if enabled
    RegWrite "0", "REG_DWORD", "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "ShowSuperHidden"
    CheckRegWrite(ShowSuperHidden_Status)
    ToggleOSCheck
    WindowsRefreshOrRun
    }
}

CheckRegWrite(key) { ; check if RegWrite was success
if key = RegRead("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "ShowSuperHidden")
    MsgBox "ToggleOS Failed", , "262144" ; 262144 = Always-on-top
}

ToggleOSCheck() { ; tray tick mark
Global ShowSuperHidden_Status
ShowSuperHidden_Status := RegRead("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "ShowSuperHidden")
If (ShowSuperHidden_Status = 0)
    A_TrayMenu.UnCheck "&Toggle OS files"
Else {
    ShowSuperHidden_Status := 1
    A_TrayMenu.Check "&Toggle OS files"
    }
}

;--------
;  = Windows Refresh Or Run

WindowsRefreshOrRun() {
if WinExist("ahk_class CabinetWClass") {
; if Windows File Explorer window exists
    WinActivate
    Sleep 500       ; change as per your system performance
    Send "{F5}"     ; refresh
    }
else {
; open new Windows File Explorer window if one doesn't already exist ; remove this section if not desired
    Run 'explorer.exe',,"Max"
    WinWait("ahk_class CabinetWClass",, 10) ; timeout 10 secs
    WinActivate
    }
}
