; /* AHK v2 Show/Hide OS files - CONTENTS */
; Settings
; Auto-execute
;  = Show/Hide OS files
;  = End auto-execute
; User-defined functions
;  = Notification
;    + MyNotificationGui
;    + EndMyNotif
;  = Toggle protected operating system (OS) files
;    + ToggleOS
;    + CheckRegWrite
;    + ToggleOSCheck
;    + WindowsRefreshOrRun
; ChangeLog

;------------------------------------------------------------------------------
; Settings

#Requires AutoHotkey v2.0
#SingleInstance force
#WinActivateForce
KeyHistory 500
Persistent                 ; added for standalone AHKs to prevent auto-exit

;------------------------------------------------------------------------------
; Auto-execute
; This section should always be at the top of your script

AHKname := "AHK v2 Show/Hide OS files v1.01"

; Show notification with parameters - text; duration in milliseconds; position on screen: xAxis, yAxis; timeout by - timer (1) or sleep (0)
MyNotificationGui("Loading " AHKname, "10000", "1650", "985", "1") ; 10000 milliseconds = 10 seconds, position bottom right corner (x-axis 1550 y-axis 985) on 1920Ã—1080 display resolution; use timer

;  = Show/Hide OS files

A_TrayMenu.Delete                             ; Delete standard menu
A_TrayMenu.Add "&Toggle OS files", ToggleOS   ; User-defined function
A_TrayMenu.Add                                ; Add a separator
A_TrayMenu.AddStandard                        ; Restore standard menu
ToggleOSCheck                                 ; Query registry and check/uncheck

;  = End auto-execute

SetTimer EndMyNotif, -1000 ; Reset notification timer to 1s after code in auto-execute section has finished running
Return ; Ends auto-execute

; Below code can be placed anywhere in your script

;------------------------------------------------------------------------------
; User-defined functions

;  = Notification

;    + MyNotificationGui

MyNotificationGui(mytext, myduration, xAxis, yAxis, timer) {       ; search for `ToolTipFn` for alternative
Global MyNotification := Gui("+AlwaysOnTop -Caption +ToolWindow")   ; +ToolWindow avoids a taskbar button and an Alt-Tab menu item.
MyNotification.BackColor := "EEEEEE"                ; White background, can be any RGB color (it will be made transparent below)
MyNotification.SetFont("s9 w1000", "Arial")         ; font size 9, bold
MyNotification.AddText("cBlack w230 Left", mytext)  ; black text
MyNotification.Show("x1650 y985 NoActivate")        ; NoActivate avoids deactivating the currently active window
WinMove xAxis, yAxis,,, MyNotification
If timer = 1
    SetTimer EndMyNotif, myduration * -1
If timer = 0 {
    Sleep myduration
    EndMyNotif
    }
}

;--------
;    + EndMyNotif

EndMyNotif() {
MyNotification.Destroy
}

;--------
;  = Toggle protected operating system (OS) files
; inspiration from https://www.autohotkey.com/board/topic/82603-toggle-hidden-files-system-files-and-file-extensions/?p=670182

;    + ToggleOS

ToggleOS(*) {
ToggleOSCheck
If Status = 0 { ; enable if disabled
    RegWrite "1", "REG_DWORD", "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "ShowSuperHidden"
    CheckRegWrite(Status)
    ToggleOSCheck
    WindowsRefreshOrRun
    }
Else { ; disable if enabled
    RegWrite "0", "REG_DWORD", "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "ShowSuperHidden"
    CheckRegWrite(Status)
    ToggleOSCheck
    WindowsRefreshOrRun
    }
}

;--------
;    + CheckRegWrite

CheckRegWrite(key) { ; check if RegWrite was success
If key = RegRead("HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "ShowSuperHidden")
    MsgBox "ToggleOS Failed",, "262144" ; 262144 = Always-on-top
    ; ToolTipFn("ToggleOS Failed", -1000) ; 1s, use tooltip and exit as an alternative to MsgBox
    ; Exit
}

;--------
;    + ToggleOSCheck

ToggleOSCheck() { ; tray tick mark
Global Status := RegRead("HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "ShowSuperHidden")
If Status = 0
    A_TrayMenu.UnCheck "&Toggle OS files"
Else A_TrayMenu.Check "&Toggle OS files"
}

;--------
;    + WindowsRefreshOrRun

WindowsRefreshOrRun() {
If WinExist("ahk_class CabinetWClass") { ; If Windows File Explorer window exists
    WinActivate
    If WinWaitActive( ,, 2)     ; wait for explorer to become active window ; 2s timeout
        Send "{F5}"             ; refresh
        ; a second refresh might be needed after a few seconds to see the effects of change in settings
        ; add a Sleep command or use SetTimer prior to refresh to account for the delay
    }
Else { ; open new explorer window if one doesn't already exist ; comment out this section if not desired
    Run 'explorer.exe',,"Max"
    WinWait("ahk_class CabinetWClass",, 10) ; timeout 10s
    WinActivate
    }
}

;------------------------------------------------------------------------------
; ChangeLog

/*
v1.01 - 2024.01.30
 * rename ShowSuperHidden_Status to Status for future expansion of function
 * condense ToggleOSCheck function
 * replace `HKEY_CURRENT_USER` with `HKCU` in regkeys
 * rename MyNotificationFunc to MyNotificationGui
 * remove unnecessary parentheses in If commands
 * rename Tool_TipFunc to ToolTipFn  because `Func` is a class
 * add changelog
 * add variable `AHKname` for versioning and updation of name in template and standalone scripts
 * improve comments and update headings
*/
